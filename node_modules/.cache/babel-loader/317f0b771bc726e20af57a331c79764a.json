{"ast":null,"code":"var _jsxFileName = \"/Users/riri/Desktop/react-spotify-player/src/App.js\";\nimport React, { Component } from \"react\";\nimport * as $ from \"jquery\";\nimport { authEndpoint, clientId, redirectUri, scopes } from \"./config\";\nimport hash from \"./hash\";\nimport Player from \"./Player\";\nimport logo from \"./logo.svg\";\nimport \"./App.css\";\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      token: null,\n      item: {\n        album: {\n          images: [{\n            url: \"\"\n          }]\n        },\n        name: \"\",\n        artists: [{\n          name: \"\"\n        }],\n        duration_ms: 0\n      },\n      is_playing: \"Paused\",\n      progress_ms: 0,\n      no_data: false\n    };\n    this.getCurrentlyPlaying = this.getCurrentlyPlaying.bind(this);\n    this.tick = this.tick.bind(this);\n  }\n\n  componentDidMount() {\n    // Set token\n    let _token = hash.access_token;\n\n    if (_token) {\n      // Set token\n      this.setState({\n        token: _token\n      });\n      this.getCurrentlyPlaying(_token);\n    } // set interval for polling every 5 seconds\n\n\n    this.interval = setInterval(() => this.tick(), 5000);\n  }\n\n  componentWillUnmount() {\n    // clear the interval to save resources\n    clearInterval(this.interval);\n  }\n\n  tick() {\n    if (this.state.token) {\n      this.getCurrentlyPlaying(this.state.token);\n    }\n  }\n\n  getCurrentlyPlaying(token) {\n    // Make a call using the token\n    $.ajax({\n      url: \"https://api.spotify.com/v1/me/player\",\n      type: \"GET\",\n      beforeSend: xhr => {\n        xhr.setRequestHeader(\"Authorization\", \"Bearer \" + token);\n      },\n      success: data => {\n        // Checks if the data is not empty\n        if (!data) {\n          this.setState({\n            no_data: true\n          });\n          return;\n        }\n\n        this.setState({\n          item: data.item,\n          is_playing: data.is_playing,\n          progress_ms: data.progress_ms,\n          no_data: false\n          /* We need to \"reset\" the boolean, in case the\n             user does not give F5 and has opened his Spotify. */\n\n        });\n      }\n    });\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"App\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"header\", {\n      className: \"App-header\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"img\", {\n      src: logo,\n      className: \"App-logo\",\n      alt: \"logo\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 11\n      }\n    }), !this.state.token && /*#__PURE__*/React.createElement(\"a\", {\n      className: \"btn btn--loginApp-link\",\n      href: `${authEndpoint}?client_id=${clientId}&redirect_uri=${redirectUri}&scope=${scopes.join(\"%20\")}&response_type=token&show_dialog=true`,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 13\n      }\n    }, \"Login to Spotify\"), this.state.token && !this.state.no_data && /*#__PURE__*/React.createElement(Player, {\n      item: this.state.item,\n      is_playing: this.state.is_playing,\n      progress_ms: this.state.progress_ms,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 13\n      }\n    }), this.state.no_data && /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 13\n      }\n    }, \"if a song is playing on spotify, something will appear here\")));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/riri/Desktop/react-spotify-player/src/App.js"],"names":["React","Component","$","authEndpoint","clientId","redirectUri","scopes","hash","Player","App","constructor","state","token","item","album","images","url","name","artists","duration_ms","is_playing","progress_ms","no_data","getCurrentlyPlaying","bind","tick","componentDidMount","_token","access_token","setState","interval","setInterval","componentWillUnmount","clearInterval","ajax","type","beforeSend","xhr","setRequestHeader","success","data","render","logo","join"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport * as $ from \"jquery\";\nimport { authEndpoint, clientId, redirectUri, scopes } from \"./config\";\nimport hash from \"./hash\";\nimport Player from \"./Player\";\nimport logo from \"./logo.svg\";\nimport \"./App.css\";\n\n\n\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      token: null,\n      item: {\n        album: {\n          images: [{ url: \"\" }]\n        },\n        name: \"\",\n        artists: [{ name: \"\" }],\n        duration_ms: 0\n      },\n      is_playing: \"Paused\",\n      progress_ms: 0,\n      no_data: false,\n    };\n\n    this.getCurrentlyPlaying = this.getCurrentlyPlaying.bind(this);\n    this.tick = this.tick.bind(this);\n  }\n\n\n\n  componentDidMount() {\n    // Set token\n    let _token = hash.access_token;\n\n    if (_token) {\n      // Set token\n      this.setState({\n        token: _token\n      });\n      this.getCurrentlyPlaying(_token);\n    }\n\n    // set interval for polling every 5 seconds\n    this.interval = setInterval(() => this.tick(), 5000);\n  }\n\n  componentWillUnmount() {\n    // clear the interval to save resources\n    clearInterval(this.interval);\n  }\n\n  tick() {\n    if(this.state.token) {\n      this.getCurrentlyPlaying(this.state.token);\n    }\n  }\n\n\n  getCurrentlyPlaying(token) {\n    // Make a call using the token\n    $.ajax({\n      url: \"https://api.spotify.com/v1/me/player\",\n      type: \"GET\",\n      beforeSend: xhr => {\n        xhr.setRequestHeader(\"Authorization\", \"Bearer \" + token);\n      },\n      success: data => {\n        // Checks if the data is not empty\n        if(!data) {\n          this.setState({\n            no_data: true,\n          });\n          return;\n        }\n\n        this.setState({\n          item: data.item,\n          is_playing: data.is_playing,\n          progress_ms: data.progress_ms,\n          no_data: false /* We need to \"reset\" the boolean, in case the\n                            user does not give F5 and has opened his Spotify. */\n        });\n      }\n    });\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <img src={logo} className=\"App-logo\" alt=\"logo\" />\n          {!this.state.token && (\n            <a\n              className=\"btn btn--loginApp-link\"\n              href={`${authEndpoint}?client_id=${clientId}&redirect_uri=${redirectUri}&scope=${scopes.join(\n                \"%20\"\n              )}&response_type=token&show_dialog=true`}\n            >\n              Login to Spotify\n            </a>\n          )}\n          {this.state.token && !this.state.no_data && (\n            <Player\n              item={this.state.item}\n              is_playing={this.state.is_playing}\n              progress_ms={this.state.progress_ms}\n            />\n          )}\n          {this.state.no_data && (\n            <p>\n              if a song is playing on spotify, something will appear here\n            </p>\n          )}\n        </header>\n      </div>\n    );\n  }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}